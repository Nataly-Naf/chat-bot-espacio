const { Markup } = require("telegraf");
const questionsA0A2 = require("./questionsA0A2");
const questionsB1B2 = require("./questionsB1B2");

let currentQuestionIndex = 0;
let score = 0;
let isTestActive = false;
let currentTestLevel = null; // –í–∏–∑–Ω–∞—á–∞—î, —è–∫–∏–π —Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω–æ

module.exports = (bot) => {
  bot.hears("–î—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å üìä", (ctx) => {
    ctx.reply(
      "–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:",
      Markup.keyboard([["–†—ñ–≤–µ–Ω—å A0-A2", "–†—ñ–≤–µ–Ω—å B1-B2"], ["–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üîô"]]).resize()
    );
  });

  bot.hears("–†—ñ–≤–µ–Ω—å A0-A2", (ctx) => {
    startTest(ctx, "A0A2");
  });

  bot.hears("–†—ñ–≤–µ–Ω—å B1-B2", (ctx) => {
    startTest(ctx, "B1B2");
  });

  const startTest = (ctx, level) => {
    // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó, —è–∫—â–æ –≤—ñ–Ω –∞–∫—Ç–∏–≤–Ω–∏–π
    if (ctx.session && ctx.session.state === "awaiting_application") {
      ctx.session.state = null;
    }

    currentQuestionIndex = 0;
    score = 0;
    isTestActive = true;
    currentTestLevel = level; // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å —Ç–µ—Å—Ç—É
    ctx.reply("–î–∞–≤–∞–π—Ç–µ –ø–æ—á–Ω–µ–º–æ —Ç–µ—Å—Ç! –û–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.");
    askQuestion(ctx);
  };

  const askQuestion = (ctx) => {
    let questions;

    // –í–∏–±—ñ—Ä –ø–∏—Ç–∞–Ω—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
    if (currentTestLevel === "A0A2") {
      questions = questionsA0A2;
    } else if (currentTestLevel === "B1B2") {
      questions = questionsB1B2;
    }

    if (currentQuestionIndex < questions.length) {
      const { question, options } = questions[currentQuestionIndex];
      ctx.reply(
        `${question}\n${options.join("\n")}`,
        Markup.keyboard([["a", "b", "c"]]).resize()
      );
    } else {
      finishTest(ctx);
    }
  };

  bot.hears(/^(a|b|c)$/i, (ctx) => { // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π a, b, c
    if (!isTestActive) return;

    const userAnswer = ctx.message.text.toLowerCase();
    let questions;

    // –í–∏–±—ñ—Ä –ø–∏—Ç–∞–Ω—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
    if (currentTestLevel === "A0A2") {
      questions = questionsA0A2;
    } else if (currentTestLevel === "B1B2") {
      questions = questionsB1B2;
    }

    const correctAnswer = questions[currentQuestionIndex].answer;

    if (userAnswer === correctAnswer) {
      score++;
      ctx.reply("¬°Respuesta correcta! ‚úÖ");
    } else {
      ctx.reply(`¬°Respuesta incorrecta! ‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${correctAnswer}`);
    }

    currentQuestionIndex++;
    setTimeout(() => askQuestion(ctx), 1000);
  });

  const finishTest = (ctx) => {
    isTestActive = false;

    let resultMessage;
    if (currentTestLevel === "A0A2") {
      // –õ–æ–≥—ñ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É A0-A2
      if (score <= 10) {
        resultMessage = `–í–∞—à —Ä—ñ–≤–µ–Ω—å: A1.1 (–ø–æ—á–∞—Ç–∫–æ–≤–∏–π) ‚Äî ${score}/30 –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. Estudiantes que cometen muchos errores en estructuras b√°sicas y tienen problemas para reconocer vocabulario esencial.`;
      } else if (score <= 18) {
        resultMessage = `–í–∞—à —Ä—ñ–≤–µ–Ω—å: A1 (–±–∞–∑–æ–≤–∏–π) ‚Äî ${score}/30 –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. Estudiantes que dominan el presente de indicativo y algunas frases comunes, pero todav√≠a tienen dificultades con tiempos pasados y estructuras m√°s complejas.`;
      } else if (score <= 25) {
        resultMessage = `–í–∞—à —Ä—ñ–≤–µ–Ω—å: A2.1 ‚Äî ${score}/30 –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. Estudiantes con buen control del presente, capaces de utilizar estructuras como el pret√©rito perfecto e indefinido, aunque con errores.`;
      } else {
        resultMessage = `–í–∞—à —Ä—ñ–≤–µ–Ω—å: A2.2 ‚Äî ${score}/30 –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. Estudiantes con buen control del presente, pasado y futuro, capaces de utilizar correctamente estructuras como el pret√©rito perfecto e indefinido, aunque con algunos errores ocasionales.`;
      }
    } else if (currentTestLevel === "B1B2") {
      // –õ–æ–≥—ñ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É B1-B2
      if (score <= 10) {
        resultMessage = `–í–∞—à —Ä—ñ–≤–µ–Ω—å: B1.1 ‚Äî ${score}/30 –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. Estudiantes que tienen control b√°sico del pasado y presente, pero a√∫n tienen problemas con formas verbales complejas y estructuras avanzadas.`;
      } else if (score <= 18) {
        resultMessage = `–í–∞—à —Ä—ñ–≤–µ–Ω—å: B1.2 ‚Äî ${score}/30 –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. Estudiantes con buen manejo de tiempos pasados, que pueden mantener conversaciones en situaciones cotidianas con algunos errores.`;
      } else if (score <= 25) {
        resultMessage = `–í–∞—à —Ä—ñ–≤–µ–Ω—å: B2.1 ‚Äî ${score}/30 –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. Estudiantes con muy buen control de tiempos verbales, capaces de mantener conversaciones complejas aunque con algunos errores ocasionales.`;
      } else {
        resultMessage = `–í–∞—à —Ä—ñ–≤–µ–Ω—å: B2.2 ‚Äî ${score}/30 –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. Estudiantes que dominan tiempos verbales complejos y pueden comunicarse de manera fluida en casi cualquier situaci√≥n.`;
      }
    }

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ñ –¥–æ–¥–∞—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    const keyboard = Markup.keyboard([
      ["–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üîô"],
      ["–ö—É—Ä—Å–∏ üìö"],
    ]).resize();

    ctx.reply(resultMessage);
    ctx.reply("–û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:", keyboard);
  };
};
